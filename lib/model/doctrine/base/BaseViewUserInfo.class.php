<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ViewUserInfo', 'doctrine');

/**
 * BaseViewUserInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $username
 * @property string $fullname
 * @property string $password
 * @property integer $activated
 * @property integer $avatar_id
 * @property integer $level_id
 * @property float $coin
 * @property integer $total_match_play
 * @property timestamp $last_login
 * @property integer $experience
 * 
 * @method integer      getId()               Returns the current record's "id" value
 * @method integer      getUserId()           Returns the current record's "user_id" value
 * @method string       getUsername()         Returns the current record's "username" value
 * @method string       getFullname()         Returns the current record's "fullname" value
 * @method string       getPassword()         Returns the current record's "password" value
 * @method integer      getActivated()        Returns the current record's "activated" value
 * @method integer      getAvatarId()         Returns the current record's "avatar_id" value
 * @method integer      getLevelId()          Returns the current record's "level_id" value
 * @method float        getCoin()             Returns the current record's "coin" value
 * @method integer      getTotalMatchPlay()   Returns the current record's "total_match_play" value
 * @method timestamp    getLastLogin()        Returns the current record's "last_login" value
 * @method integer      getExperience()       Returns the current record's "experience" value
 * @method ViewUserInfo setId()               Sets the current record's "id" value
 * @method ViewUserInfo setUserId()           Sets the current record's "user_id" value
 * @method ViewUserInfo setUsername()         Sets the current record's "username" value
 * @method ViewUserInfo setFullname()         Sets the current record's "fullname" value
 * @method ViewUserInfo setPassword()         Sets the current record's "password" value
 * @method ViewUserInfo setActivated()        Sets the current record's "activated" value
 * @method ViewUserInfo setAvatarId()         Sets the current record's "avatar_id" value
 * @method ViewUserInfo setLevelId()          Sets the current record's "level_id" value
 * @method ViewUserInfo setCoin()             Sets the current record's "coin" value
 * @method ViewUserInfo setTotalMatchPlay()   Sets the current record's "total_match_play" value
 * @method ViewUserInfo setLastLogin()        Sets the current record's "last_login" value
 * @method ViewUserInfo setExperience()       Sets the current record's "experience" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     ngoctv1
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseViewUserInfo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('view_user_info');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 8,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('fullname', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('activated', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('avatar_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('level_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('coin', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1000000',
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('total_match_play', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('last_login', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('experience', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}