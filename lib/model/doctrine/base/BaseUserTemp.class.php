<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserTemp', 'doctrine');

/**
 * BaseUserTemp
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $fullname
 * @property string $identity
 * @property string $address
 * @property string $email
 * @property string $mobile
 * @property string $birth
 * @property integer $sex
 * @property timestamp $register_date
 * @property integer $age
 * @property float $cash
 * @property integer $is_active
 * @property integer $totalgame
 * @property integer $clanid
 * @property integer $roleid
 * @property string $avatar
 * @property integer $refid
 * @property integer $hits
 * @property string $activecode
 * @property integer $is_partner
 * 
 * @method integer   getId()            Returns the current record's "id" value
 * @method string    getUsername()      Returns the current record's "username" value
 * @method string    getPassword()      Returns the current record's "password" value
 * @method string    getFullname()      Returns the current record's "fullname" value
 * @method string    getIdentity()      Returns the current record's "identity" value
 * @method string    getAddress()       Returns the current record's "address" value
 * @method string    getEmail()         Returns the current record's "email" value
 * @method string    getMobile()        Returns the current record's "mobile" value
 * @method string    getBirth()         Returns the current record's "birth" value
 * @method integer   getSex()           Returns the current record's "sex" value
 * @method timestamp getRegisterDate()  Returns the current record's "register_date" value
 * @method integer   getAge()           Returns the current record's "age" value
 * @method float     getCash()          Returns the current record's "cash" value
 * @method integer   getIsActive()      Returns the current record's "is_active" value
 * @method integer   getTotalgame()     Returns the current record's "totalgame" value
 * @method integer   getClanid()        Returns the current record's "clanid" value
 * @method integer   getRoleid()        Returns the current record's "roleid" value
 * @method string    getAvatar()        Returns the current record's "avatar" value
 * @method integer   getRefid()         Returns the current record's "refid" value
 * @method integer   getHits()          Returns the current record's "hits" value
 * @method string    getActivecode()    Returns the current record's "activecode" value
 * @method integer   getIsPartner()     Returns the current record's "is_partner" value
 * @method UserTemp  setId()            Sets the current record's "id" value
 * @method UserTemp  setUsername()      Sets the current record's "username" value
 * @method UserTemp  setPassword()      Sets the current record's "password" value
 * @method UserTemp  setFullname()      Sets the current record's "fullname" value
 * @method UserTemp  setIdentity()      Sets the current record's "identity" value
 * @method UserTemp  setAddress()       Sets the current record's "address" value
 * @method UserTemp  setEmail()         Sets the current record's "email" value
 * @method UserTemp  setMobile()        Sets the current record's "mobile" value
 * @method UserTemp  setBirth()         Sets the current record's "birth" value
 * @method UserTemp  setSex()           Sets the current record's "sex" value
 * @method UserTemp  setRegisterDate()  Sets the current record's "register_date" value
 * @method UserTemp  setAge()           Sets the current record's "age" value
 * @method UserTemp  setCash()          Sets the current record's "cash" value
 * @method UserTemp  setIsActive()      Sets the current record's "is_active" value
 * @method UserTemp  setTotalgame()     Sets the current record's "totalgame" value
 * @method UserTemp  setClanid()        Sets the current record's "clanid" value
 * @method UserTemp  setRoleid()        Sets the current record's "roleid" value
 * @method UserTemp  setAvatar()        Sets the current record's "avatar" value
 * @method UserTemp  setRefid()         Sets the current record's "refid" value
 * @method UserTemp  setHits()          Sets the current record's "hits" value
 * @method UserTemp  setActivecode()    Sets the current record's "activecode" value
 * @method UserTemp  setIsPartner()     Sets the current record's "is_partner" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     ngoctv1
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserTemp extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_temp');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('password', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('fullname', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('identity', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('address', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('mobile', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('birth', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('sex', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('register_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('age', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '20',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('cash', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('is_active', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('totalgame', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('clanid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('roleid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('avatar', 'string', 1000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1000,
             ));
        $this->hasColumn('refid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('hits', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('activecode', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('is_partner', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}